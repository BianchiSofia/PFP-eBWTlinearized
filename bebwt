#!/usr/bin/env python3

import sys, time, argparse, subprocess, os.path

Description = """
Tool to build the EBWT for higly repetive files.
"""

dirname = os.path.dirname(os.path.abspath(__file__))
parse_exe        =  os.path.join(dirname, "circpfp.x")
parseNT_exe      =  os.path.join(dirname, "circpfpNT.x")
parseReads_exe   =  os.path.join(dirname, "circpfpr.x")
parseReadsNT_exe =  os.path.join(dirname, "circpfprNT.x")
bebwtNT_exe      =  os.path.join(dirname, "bebwtNT.x")
bebwtNT64_exe    =  os.path.join(dirname, "bebwtNT64.x")
invertNT_exe     =  os.path.join(dirname, "invertNT.x")

def main():
    parser = argparse.ArgumentParser(description=Description, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('input', help='input file name', type=str)
    parser.add_argument('-w', '--wsize', help='sliding window size (def. 10)', default=10, type=int)
    parser.add_argument('-p', '--mod', help='hash modulus (def. 100)', default=100, type=int)
    parser.add_argument('-t', help='number of helper threads (def. None)', default=0, type=int)
    parser.add_argument('-n', help='max number of KR-windows (def. 1)', default=1, type=int)
    parser.add_argument('-i', help='prime index (def. 0)', default=0, type=int)
    parser.add_argument('-r', help='store eBWT in RLE format (def. False)', action='store_true')
    parser.add_argument('-v',  help='verbose',action='store_true')
    parser.add_argument('--reads', help='process input ad a read set (def. False)', action='store_true')
    parser.add_argument('--period', help='remove periodic sequences (def. False)', action='store_true')
    parser.add_argument('--invert', help='invert the eBWT (def. False)', action='store_true')
    parser.add_argument('--keep',  help='keep auxiliary files (debug only)',action='store_false')
    parser.add_argument('--parsing',  help='stop after the parsing phase (debug only)',action='store_true')
    args = parser.parse_args()

    logfile_name = args.input + ".log"
    # get main bigbwt directory
    args.bigbwt_dir = os.path.split(sys.argv[0])[0]
    print("Sending logging messages to file:", logfile_name)
    with open(logfile_name,"a") as logfile:

        # ---------- Parsing of the input file
        start0 = start = time.time()

        if args.reads:
            if args.t>0:
                command = "{exe} {file} -w {wsize} -p {modulus} -t {th} -n {wnumb}".format(
                        exe = os.path.join(args.bigbwt_dir,parseReads_exe),
                        wsize=args.wsize, modulus = args.mod, th=args.t, wnumb=args.n, file=args.input)
            else:
                command = "{exe} {file} -w {wsize} -p {modulus} -n {wnumb}".format(
                        exe = os.path.join(args.bigbwt_dir,parseReadsNT_exe),
                        wsize=args.wsize, modulus = args.mod, wnumb = args.n, file=args.input)
        else:
            if args.t>0:
                command = "{exe} {file} -w {wsize} -p {modulus} -t {th}".format(
                        exe = os.path.join(args.bigbwt_dir,parse_exe),
                        wsize=args.wsize, modulus = args.mod, th=args.t, file=args.input)
            else:
                command = "{exe} {file} -w {wsize} -p {modulus}".format(
                        exe = os.path.join(args.bigbwt_dir,parseNT_exe),
                        wsize=args.wsize, modulus = args.mod, file=args.input)


        if (args.i > 0): command += " -i " + str(args.i)
        if args.v: command += " -v"
        if args.period: command += " -c"

        print("==== Parsing. Command:", command)
        if(execute_command(command,logfile,logfile_name)!=True):
            return
        print("Elapsed time: {0:.4f}".format(time.time()-start))
        if args.parsing:
            # delete temporary parsing files 
            command = "rm -f {file}.eparse_old {file}.start {file}.offset {file}.fchar {file}.eocc".format(file=args.input)
            if(execute_command(command,logfile,logfile_name)!=True):
                return
            for i in range(args.t):
                command = "rm -f {file}.{i}.eparse_old {file}.{i}.offset_old ".format(file=args.input, i=i)
                if(execute_command(command,logfile,logfile_name)!=True):
                    return
            print("==== Stopping after the parsing phase as requested")      
            return

        # ----------- Computing the eBWT of the text
        start = time.time()
        parse_size = os.path.getsize(args.input+".eparse")/4
        print("Parse contains " + str(parse_size) + " words.")
        dict_size = os.path.getsize(args.input+".edict")
        print("Dictionary contains " + str(dict_size) + " characters.")
        if(parse_size >=  (2**32-1) or dict_size >=  (2**31-1)):
        #if(True):
            print("running in 64 bit mode")
            command = "{exe} {file} -w {wsize}".format(
                    exe = os.path.join(args.bigbwt_dir,bebwtNT64_exe), wsize=args.wsize, file=args.input)
        else:
            print("running in 32 bit mode")
            command = "{exe} {file} -w {wsize}".format(
                     exe = os.path.join(args.bigbwt_dir,bebwtNT_exe), wsize=args.wsize, file=args.input)

        if(args.r): command += " -r"
        print("==== Computing eBWT of Text. Command:", command)
        if(execute_command(command,logfile,logfile_name)!=True):
            return
        print("Elapsed time: {0:.4f}".format(time.time()-start));
        print("Total construction time: {0:.4f}".format(time.time()-start0))
        if args.keep:
            print("Deleting auxiliary files")
            command = "rm -f {file}.eparse_old {file}.offset_old {file}.offset {file}.eocc {file}.fchar {file}.start".format(file=args.input)
            if(execute_command(command,logfile,logfile_name)!=True):
                return
            for i in range(args.t):
                command = "rm -f {file}.{i}.eparse_old {file}.{i}.offset_old ".format(file=args.input, i=i)
                if(execute_command(command,logfile,logfile_name)!=True):
                    return
        if args.invert:
            print("Inverting the eBWT")
            command = "{exe} {file}".format(exe = os.path.join(args.bigbwt_dir,invertNT_exe), file=args.input)
            if(execute_command(command,logfile,logfile_name)!=True):
                return

# execute command: return True is everything OK, False otherwise
def execute_command(command,logfile,logfile_name,env=None):
  try:
    #subprocess.run(command.split(),stdout=logfile,stderr=logfile,check=True,env=env)
    subprocess.check_call(command.split(),stdout=logfile,stderr=logfile,env=env)
  except subprocess.CalledProcessError:
    print("Error executing command line:")
    print("\t"+ command)
    print("Check log file: " + logfile_name)
    return False
  return True
  

if __name__ == '__main__':
    main()
